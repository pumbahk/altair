Booster リグレッションテスト
=============================

自動テストのための前提
--------------------------------

- 決済方法は窓口を使う
- 配送方法も窓口を使う


設定
----------------------

>>> from ticketing.bj89ers import main
>>> from ticketing.bj89ers import testing
>>> from datetime import datetime, timedelta
>>> now = datetime.now()
>>> oneday = timedelta(days=1)
>>> yesterday = now - oneday
>>> tommorow = now + oneday

>>> settings = {
...     '89ers.organization_id':         "1",
...     '89ers.event_id':                "1",
...     '89ers.performance_id':          "1",
...     '89ers.start_at':                format(yesterday, '%Y-%m-%d %H:%M:%S'),
...     '89ers.end_at':                  format(tommorow, '%Y-%m-%d %H:%M:%S'),
...     'altair.cart.domain.mapping':    "{}",
...     'sqlalchemy.url':                'sqlite:///tmp/data.sqlite',
...     'sqlalchemy.echo':               False,
...     'mako.directories':              'ticketing.bj89ers:templates',
... }


>>> from ticketing.bj89ers import testing
>>> app = testing.BoosterTestApp(settings)
>>> testing.setup()

テストデータ
-----------------------------

Site

>>> site = testing.t_data(
...     'ticketing.core.models.Site',
...    )

Organization

>>> organization = testing.t_data(
...     'ticketing.core.models.Organization', 
...     name=u'仙台89ers', 
...     code='89', 
...     short_name='89ers',
...     )

Event

>>> event = testing.t_data('ticketing.core.models.Event', organization=organization)

Performance

>>> performance = testing.t_data('ticketing.core.models.Performance', event=event)

Venue

>>> venue = testing.t_data('ticketing.core.models.Venue', site=site, organization=organization, performance=performance)

SalesSegment

>>> sales_segment = testing.t_data('ticketing.core.models.SalesSegment', event=event)

PaymentMethod

DeliveryMethod

PaymentDeliveryMethodPair

StockType

>>> stock_type = testing.t_data('ticketing.core.models.StockType', event=event)

Stock

>>> 

Product

ProductItem


>>> testing.flush()


購入画面 :class:`ticketing.bj89ers.views.IndexView`
--------------------------------------------------------------

>>> res = app.get('/')
>>> len(res.form.fields)
25
>>> res.form.fields.keys()
[u'cont', u'old_id_number', u'member_type', u't_shirts_size', u'last_name', u'first_name', u'last_name_kana', u'first_name_kana', u'year', u'month', u'day', u'sex', u'zipcode1', u'zipcode2', u'prefecture', u'city', u'address1', u'address2', u'tel_1', u'tel_2', u'email', u'email2', u'mail_permission', u'publicity', None]


決済選択画面 :class:`ticketing.bj89ers.views.PaymentView`
--------------------------------------------------------------

確認画面
--------------------------------------------------------------------

完了画面 :class:`ticketing.bj89ers.views.CompleteView`
--------------------------------------------------------------------

申し込み確認 :class:`ticketing.bj89ers.views.OrderReviewView`
--------------------------------------------------------------------------


3Dセキュアフロー
--------------------------

- 購入画面
- 決済方法選択画面
- カード情報入力画面
- 3Dセキュア認証画面（外部）
- 3Dセキュアコールバック オーソリAPI呼び出し
- 確認画面
- 完了画面 売り上げ確定API呼び出し

