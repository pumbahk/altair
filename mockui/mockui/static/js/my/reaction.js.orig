var reaction = (function(){
    var Reaction = function(opt){
        // opts: {react: fn, 
        //        side_effect: fn
        //        after_that: fn}}
        //
        var react = opt.react;
        var _action = function(){
            var arguments_ = arguments;
            if(!!opt.side_effect){
                setTimeout(function(){
                    return opt.side_effect.apply(this,arguments_)
                },0);
            }
            return opt.react.apply(this,arguments)
        };
        var delegated = function(dfd, cont){
            dfd.done(_action)
            if(!!cont){
                dfd.done(cont);
            }
            // if(!!opt.after_that){
            //     dfd = dfd.done(opt.after_that);
            // }
            return dfd.promise();
        };

        var delegated_with_args = function(dfd, args, cont){
            if(!!cont){
                dfd.done(cont);
            }

            dfd.done(function(){
                return _action.apply(dfd, args);
            });
            // if(!!opt.after_that){
            //     dfd = dfd.done(opt.after_that);
            // }
            return dfd.promise();
        }
        var start = function(cont){
            var dfd = $.Deferred()
            delegated(dfd, cont);
            return dfd;
        }
        return {
            start: start, 
            delegated: delegated, 
            delegated_with_args: delegated_with_args
        }
    };

    // layout select action
    var AfterDrawableSelectLayout = Reaction({
        react: function(ctx){
            service.SelectLayoutService.attach_click_after_event(
                ctx.event_farm, 
                ctx.candidate
            );
            service.SelectLayoutService.attach_overlay_event(
                ctx.overlay_trigger, 
                ctx.overlay_close_trigger
            );
        }, 
        side_effect: function(ctx){
            service.ElementLayoutService.default_layout(ctx.layout_targets);
            service.VisibilityService.unhidden(ctx.selected_id);
        }
    });


    var _swap_selected_image = function(ctx){
        // 選択されたhtmlの要素を入れ替える
        return service.ApiService.load_layout(ctx.prefix, ctx.layout_name).done( // todo fix
            DroppableSheetViewModel.on_drawable
        ).done(ctx.after_api_cont);
    };
    var AfterSelectLayoutWithLoadApi = Reaction({
        react: function(ctx){
            return service.ApiService.load_layout(ctx.prefix, ctx.layout_name).done( // todo fix
                DroppableSheetViewModel.on_drawable
            ).done(ctx.after_api_cont)
        }, 
        side_effect: _swap_selected_image
    });
    var AfterSelectLayout = Reaction({
        react: function(ctx){
            return service.ApiService.load_layout(ctx.prefix, ctx.layout_name).done( // todo fix
                DroppableSheetViewModel.on_drawable
            )
        }, 
        side_effect: _swap_selected_image
    });


    // droppable sheet
    var AfterDrawableDroppableSheet = Reaction({
        react: function(ctx){
            var dfd = $.Deferred()
            dfd.done(function(){
                // 挿入されたwidgetの表示が気に食わないので後で書きなおすかも？
                service.ElementLayoutService.replace_inner(
                    ctx.dropped_sheet, ctx.selected_html
                );
            });
            dfd.done(function(){
                service.DroppableSheetService.attach_droppable(ctx.selected_layout);
            });
            dfd.resolve();
        },
        side_effect: function(ctx){
            var cl = layouts.CandidateList(ctx.selected_layout);
            layouts.DefaultLayout.selected_layout(cl);
        }
    });

    var DragWidgetFromPalet = Reaction({
        react: function(draggable, droppable){
            var widget_name = service.ElementInfoService.get_name($(draggable));
            var dropped_widget = service.DragWidgetService.create_dropped_widget(widget_name);
            service.DroppableSheetService.append_widget($(droppable), dropped_widget);
            
            var maker = service.WidgetDialogService.get_overlay_maker(widget_name);
            service.WidgetDialogService.attach_overlay_event(maker, dropped_widget);
            var block_name = service.ElementInfoService.get_name($(droppable));
            service.ApiService.save_block(block_name, widget_name, dropped_widget);
        }
    });

    var DragWidgetFromInternalBlock = Reaction({
        react: function(draggable, droppable){
            service.ApiService.move_block(draggable, droppable);
        }
    });

    return {
        Reaction: Reaction, 
        AfterDrawableSelectLayout: AfterDrawableSelectLayout, 
        AfterSelectLayout: AfterSelectLayout, 
        AfterSelectLayoutWithLoadApi: AfterSelectLayoutWithLoadApi, 
        AfterDrawableDroppableSheet: AfterDrawableDroppableSheet, 
        DragWidgetFromPalet: DragWidgetFromPalet, 
        DragWidgetFromInternalBlock: DragWidgetFromInternalBlock
    };
})();