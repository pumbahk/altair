[DEFAULT]
www_check_docroot = %(here)s/../var/www-check/altair.ticketing.cart

sqlalchemy.url = ${altair:ticketing.db_url.master}
altair.sqlahelper.sessions.slave.url = ${altair:ticketing.db_url.slave}
altair.sqlahelper.sessions.famiport.url = ${altair:famiport.db_url.master}

[app:payment]
use = config:%(here)s/../../baseconf/common.ini#payment
pyramid.includes = pyramid_tm pyramid_fanstatic pyramid_mailer altair_gaq altair.findable_label altair.auth altair.app.ticketing.cart.dummy ${altair:extra_pyramid_includes}

get sqlalchemy.url = sqlalchemy.url
get altair.sqlahelper.sessions.slave.url = altair.sqlahelper.sessions.slave.url
get altair.sqlahelper.sessions.famiport.url = altair.sqlahelper.sessions.famiport.url

; altair:site-data
altair.site_data.base_url = s3://tstar-dev/venue-layouts/frontend/

; altair.ticketing.cart.sitecatalyst
altair.ticketing.cart.sitecatalyst.dynamicAccountSelection = false

; altair.mq
altair.ticketing.cart.mq = altair.mq.consumer.pika_client_factory
                           altair.mq.publisher.pika_publisher_factory
altair.ticketing.cart.mq.url = ${altair:ticketing.mq_url}

;; altair.mq -- Pika (AMQP) を使わないでローカルで同期的にディスパッチする場合
;altair.ticketing.cart.mq = altair.mq.publisher.locally_dispatching_publisher_consumer_factory
;altair.ticketing.cart.mq.routes = cart:cart

; altair.rakuten_auth
altair.rakuten_auth.url_builder_factory = altair.app.ticketing.security.RakutenAuthURLBuilder
altair.rakuten_auth.session = ${altair:httpsession_persistence_backend_type}
altair.rakuten_auth.session.type = ${altair:beaker_backend_type}
altair.rakuten_auth.session.data_dir = %(here)s/../tmp/beaker/altair.rakuten_auth/data
altair.rakuten_auth.session.lock_dir = %(here)s/../tmp/beaker/altair.rakuten_auth/lock
altair.rakuten_auth.oauth.consumer_key = ${altair:rakuten_auth.oauth.consumer_key}
altair.rakuten_auth.oauth.secret = ${altair:rakuten_auth.oauth.secret}
altair.rakuten_auth.endpoint = ${altair:rakuten_auth.endpoint}
altair.rakuten_auth.oauth.endpoint.access_token = ${altair:rakuten_auth.oauth.endpoint.access_token}
altair.rakuten_auth.oauth.endpoint = ${altair:rakuten_auth.oauth.endpoint}

; altair.converter_openid
altair.converter_openid.endpoint = ${altair:converter_openid.endpoint}

; altair.app.ticketing.authentication
altair.ticketing.authentication.privatekey.key = privatekey_test

; Beaker
session.type = ${altair:beaker_backend_type}
session.data_dir = %(here)s/../tmp/beaker/altair.app.ticketing.userapp/data
session.lock_dir = %(here)s/../tmp/beaker/altair.app.ticketing.userapp/lock

cache.type = ${altair:beaker_backend_type}
cache.data_dir = %(here)s/../tmp/beaker/altair.app.ticketing.cart/data
cache.lock_dir = %(here)s/../tmp/beaker/altair.app.ticketing.cart/lock

; altair.httpsession
altair.httpsession.persistence = ${altair:httpsession_persistence_backend_type}
altair.httpsession.persistence.type = ${altair:beaker_backend_type}
altair.httpsession.persistence.data_dir = %(here)s/../tmp/beaker/altair.app.ticketing.userapp/data
altair.httpsession.persistence.lock_dir = %(here)s/../tmp/beaker/altair.app.ticketing.userapp/lock
altair.httpsession.http_backend = altair.mobile.session.http_backend_factory
altair.httpsession.http_backend.secure = ${altair:userapp_secure_cookie}
altair.httpsession.http_backend.httponly = ${altair:userapp_httponly_cookie}
altair.httpsession.http_backend.query_string_key = JSESSIONID

; altair.queryprofile
altair.queryprofile.summary_path = cart/__queryprofile

; dogpile.cache
dogpile_cache.altair_oauth_auth_plugin_metadata.backend = ${altair:dogpile_cache_backend_type}
dogpile_cache.altair_oauth_auth_plugin_metadata.arguments.redis_expiration_time = 86400
dogpile_cache.altair_oauth_auth_plugin_metadata.arguments.filename = %(here)s/../tmp/altair_oauth_auth
dogpile_cache.altair_oauth_auth_plugin_metadata.arguments.host = 127.0.0.1
dogpile_cache.altair_oauth_auth_plugin_metadata.arguments.db = 6

; dummy_sej 利用する時に下記５行の;を外す
;sej.inticket_api_url = http://localhost:8046
;sej.terminal_id = 1001
;sej.shop_id = 1001
;sej.password = 1001
;sej.api_key = 1001

; altair.discount_code.eagles_communicator
altair.discount_code.eagles_communicator.endpoint_base = ${altair:discount_code.eagles_communicator.endpoint_base}
altair.discount_code.eagles_communicator.hash_key = 60eAb@%Fa7e?
altair.discount_code.eagles_communicator.http_proxy = ${altair:discount_code.eagles_communicator.http_proxy}
altair.discount_code.eagles_communicator.https_proxy = ${altair:discount_code.eagles_communicator.https_proxy}

; altair cart and lot agreement page: agreement confirmation checkbox and button removed on event id base (TKT-7830)
; If you want to set event ids, so please join with ','.
altair.agreement_confirmation_removed.event.ids = 11891

; externalmember credentials' encryption
; public key to use for encryption in AES128-CBC
altair.ticketing.authentication.externalmember.cipher.pub_key = 14186d9724e9200f56113f85561effaa
; initialization vector to use for encryption in AES128-CBC
altair.ticketing.authentication.externalmember.cipher.iv = 7338b6bbae3ee79af99d735fce5c89a0

[app:www-check]
use = egg:Paste#static
document_root = %(www_check_docroot)s

[filter:prefix]
use = egg:PasteDeploy#prefix
prefix = /cart

[filter:browserid]
use = egg:altair.browserid#browserid
cookie_name = browserid
env_key = repoze.browserid

[pipeline:pipeline]
pipeline = 
    prefix
    browserid
    payment

[composite:main]
use = egg:Paste#urlmap
/ = pipeline
/.www-check = www-check

[server:main]
use  = egg:gunicorn#main
host = 0.0.0.0
port = %(http_port)s
workers = 1
timeout = 3600
graceful_timeout = 3600

# Begin logging configuration

[loggers]
keys = root, altair, ticketing, cart, sqlalchemy

[handlers]
keys = console, fluent, sqlalchemy

[formatters]
keys = generic

[logger_root]
level = INFO
handlers = console, fluent

[logger_altair]
level = DEBUG
handlers = console, fluent
qualname = altair
propagate = 0

[logger_ticketing]
level = DEBUG
handlers = console, fluent
qualname = altair.app.ticketing
propagate = 0

[logger_cart]
level = DEBUG
handlers = console, fluent
qualname = altair.app.ticketing.cart
propagate = 0

[logger_sqlalchemy]
level = INFO
handlers = sqlalchemy
qualname = sqlalchemy.engine
propagate = 0

[handler_console]
class = altair.log.filters.BrowserIdStreamHandler
args = (sys.stderr,)
level = ${altair:console_loglevel}
formatter = generic

[handler_sqlalchemy]
class = altair.log.filters.BrowserIdTimedRotatingFileHandler
args = ('%(here)s/../log/altair.ticketing.cart.sqlalchemy.log', 'D',)
level = INFO
formatter = generic

[handler_fluent]
class = altair.log.filters.BrowserIdFluentHandler
args = ('altair.ticketing.cart', '127.0.0.1', 24224, 3.0, False, 'utf-8', None, ['environ', 'params', 'session'])
level = NOTSET
formatter = generic

[formatter_generic]
format = %(asctime)s %(browserid)s %(url)s %(levelname)-5.5s [%(name)s][%(hostname)s][%(threadName)s] %(message)s

# End logging configuration
