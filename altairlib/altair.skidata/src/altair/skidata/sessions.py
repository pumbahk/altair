# coding=utf-8
import logging
import urllib2

from altair.skidata.exceptions import SkidataWebServiceError
from altair.skidata.interfaces import ISkidataSession
from altair.skidata.marshaller import SkidataXmlMarshaller
from altair.skidata.models import SkidataWebServiceResponse, Header, TSData, ProcessRequest, Envelope, Body
from zope.interface import implementer

logger = logging.getLogger(__name__)

XML_ENCODING = 'utf-8'


@implementer(ISkidataSession)
class SkidataWebServiceSession(object):
    """A Skidata Web Service session"""
    def __init__(self, url, version, issuer, receiver, timeout):
        self.url = url
        self._version = version
        self._issuer = issuer
        self._receiver = receiver
        self._timeout = timeout

    def make_header(self, request_id):
        return Header(version=self._version, issuer=self._issuer, receiver=self._receiver, request_id=request_id)

    def send(self, request_id=None, event_ts_property=None, whitelist=None, blacklist=None, strict=True):
        """
        Send a request to Skidata HSH (Handshake.Logic)
        :param request_id: Unique ID (integer) for XML-Data generated by TS, recorded in HSH in case of error
        :param event_ts_property: EventTSProperty object or a list of EventTSProperty objects
        :param whitelist: WhitelistRecord object or a list of WhitelistRecord objects
        :param blacklist: BlacklistRecord object or a list of BlacklistRecord objects
        :param strict: boolean to send a request XML-Data with the values cut off at the maximum length.
        """
        header = self.make_header(request_id=request_id)
        ts_data = TSData(header=header, event_ts_property=event_ts_property,
                         whitelist=whitelist, blacklist=blacklist)

        marshaled_ts_data = SkidataXmlMarshaller.marshal(ts_data, encoding=XML_ENCODING, strict=strict)
        process_request = ProcessRequest(ts_data=marshaled_ts_data.decode(XML_ENCODING))

        body = Body(process_request=process_request)
        envelope = Envelope(body=body)

        xml_data = SkidataXmlMarshaller.marshal(model=envelope, encoding=XML_ENCODING,
                                                xml_declaration=True, pretty_print=True)

        http_headers = {
            'Content-Type': 'text/xml; charset={}'.format(XML_ENCODING),
            'soapAction': 'http://tempuri.org/IImporterWebService/ProcessRequest'
            # SOAP action defined in Skidata WSDL.
        }
        request = urllib2.Request(self.url, xml_data, http_headers)

        logger.debug(u'Sending a request to HSH. A request data: %s', xml_data.decode(XML_ENCODING))

        resp_code, resp_data = None, None
        try:
            resp = urllib2.urlopen(request, timeout=self._timeout)
            resp_code, resp_data = resp.getcode(), resp.read()
            return SkidataWebServiceResponse(resp_code, resp_data.decode(XML_ENCODING))
        except UnicodeError:
            return SkidataWebServiceResponse(resp_code, resp_data)
        except Exception as e:
            raise SkidataWebServiceError(u'Failed to send a request to HSH (request ID: {}). '
                                         u'reason: {}'.format(request_id, e))


def skidata_webservice_session(settings):
    url = settings.get('altair.skidata.webservice.url')
    if not url:
        # Start a local server
        from altair.skidata.server import start_local_hsh_server
        url = start_local_hsh_server()
        settings['altair.skidata.webservice.url'] = url
        logger.debug('Local Skidata HSH server started with %s', url)

    version = settings.get('altair.skidata.webservice.header.version')
    issuer = settings.get('altair.skidata.webservice.header.issuer')
    receiver = settings.get('altair.skidata.webservice.header.receiver')
    timeout = int(settings.get('altair.skidata.webservice.timeout'))

    return SkidataWebServiceSession(url=url, version=version, issuer=issuer,
                                    receiver=receiver, timeout=timeout)


def includeme(config):
    settings = config.registry.settings
    session = skidata_webservice_session(settings)
    config.registry.registerUtility(session, ISkidataSession)
