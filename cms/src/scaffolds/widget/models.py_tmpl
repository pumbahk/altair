from altaircms.interfaces import IWidget
from zope.interface import implements
from altaircms.widget.models import Widget
from altaircms.plugins.base import DBSession
from altaircms.plugins.base import asset
from altaircms.plugins.base import HandleSessionMixin
from altaircms.plugins.base import UpdateDataMixin

import sqlalchemy as sa
import sqlalchemy.orm as orm

class {{Package}}Widget(Widget):
    implements(IWidget)
    type = "{{package}}"

    template_name = "altaircms.plugins.widget:{{package}}/render.mako"
    __tablename__ = "widget_{{package}}"
    __mapper_args__ = {"polymorphic_identity": type}
    query = DBSession.query_property()

    id = sa.Column(sa.Integer, sa.ForeignKey("widget.id"), primary_key=True)
    asset_id = sa.Column(sa.Integer, sa.ForeignKey("asset.id"))
    asset = orm.relationship({{Package}}Asset, backref="widget", uselist=False)

    def __init__(self, id=None, asset_id=None):
        self.id = id
        self.asset_id = asset_id


class {{Package}}WidgetResource(HandleSessionMixin, UpdateDataMixin):
    def __init__(self, request):
        self.request = request

    def _get_or_create(self, model, widget_id):
        if widget_id is None:
            return model()
        else:
            return DBSession.query(model).filter(model.id == widget_id).one()
        
    def get_{{package}}_widget(self, widget_id):
        return self._get_or_create({{Package}}Widget, widget_id)
